import { Sequelize, Dialect } from "sequelize"; <% for (const table of tables) {%> 
import <%= upperFirst(table.name) %>Model from "./models/<%= table.name %>"; <% }%>
import config from "./config/index";

const sequelize = new Sequelize(config.db_name,
    config.db_username, config.db_password, {
        host: "localhost",
        dialect: config.db_type as Dialect,
        logging: false
    });

<% for (const table of tables) {%> 
const <%= upperFirst(table.name) %> = <%= upperFirst(table.name) %>Model(sequelize, Sequelize); <% }%>
<% for (const a of assoc11) {%> 
<%= upperFirst(a[0]) %>.belongsTo(<%= upperFirst(a[1]) %>); <% }%>
<% for (const a of assoc1n) {%> 
<%= upperFirst(a[0]) %>.belongsTo(<%= upperFirst(a[1]) %>); <% }%>
<% for (const a of assocnm) {%> 
<%= upperFirst(a[0]) %>.belongsToMany(<%= upperFirst(a[1]) %>, {
  through: '<%= upperFirst(a[0]) + upperFirst(a[1]) %>' 
}); 
<%= upperFirst(a[1]) %>.belongsToMany(<%= upperFirst(a[0]) %>, {
  through: '<%= upperFirst(a[0]) + upperFirst(a[1]) %>' 
});<% }%>

async function runSequelize() {
  try{
    await sequelize.authenticate();
    console.log('Connection has been established successfully.');
    await sequelize.sync({ force: true });
  } catch(err) {
      console.log('Connection failed, ' + err);
  }
}

runSequelize();

export default {<% for (const table of tables) {%> 
    <%= upperFirst(table.name) %>,<% }%>
}